//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_2D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#define OPS_FUN_PREFIX __device__ __host__
#include "user_types.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define field field_OPSCONSTANT
__constant__ field_type field;
#define grid grid_OPSCONSTANT
__constant__ grid_type grid;
#define number_of_states number_of_states_OPSCONSTANT
__constant__ int number_of_states;
#define states states_OPSCONSTANT
__constant__ state_type *states;
#define g_circ g_circ_OPSCONSTANT
__constant__ int g_circ;
#define g_point g_point_OPSCONSTANT
__constant__ int g_point;
#define g_rect g_rect_OPSCONSTANT
__constant__ int g_rect;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&field)[0]=0;
((int*)&grid)[0]=0;
((int*)&number_of_states)[0]=0;
((int*)&states)[0]=0;
((int*)&g_circ)[0]=0;
((int*)&g_point)[0]=0;
((int*)&g_rect)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"field")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(field_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"grid")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(grid_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"number_of_states")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(number_of_states_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"states")) {
    char *temp; hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(states_OPSCONSTANT), &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"g_circ")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_circ_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"g_point")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_point_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"g_rect")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(g_rect_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "field_summary_kernel_hip_kernel.cpp"
#include "generate_chunk_kernel_hip_kernel.cpp"
#include "initialise_chunk_kernel_zero_hip_kernel.cpp"
#include "initialise_chunk_kernel_zero_x_hip_kernel.cpp"
#include "initialise_chunk_kernel_zero_y_hip_kernel.cpp"
#include "initialise_chunk_kernel_xx_hip_kernel.cpp"
#include "initialise_chunk_kernel_yy_hip_kernel.cpp"
#include "initialise_chunk_kernel_x_hip_kernel.cpp"
#include "initialise_chunk_kernel_y_hip_kernel.cpp"
#include "initialise_chunk_kernel_cellx_hip_kernel.cpp"
#include "initialise_chunk_kernel_celly_hip_kernel.cpp"
#include "initialise_chunk_kernel_volume_hip_kernel.cpp"
#include "set_field_kernel_hip_kernel.cpp"
#include "tea_leaf_init_zero2_kernel_hip_kernel.cpp"
#include "tea_leaf_yeqx_kernel_hip_kernel.cpp"
#include "tea_leaf_dot_kernel_hip_kernel.cpp"
#include "tea_leaf_cg_calc_w_reduce_kernel_hip_kernel.cpp"
#include "tea_leaf_axpy_kernel_hip_kernel.cpp"
#include "tea_leaf_cg_calc_ur_r_reduce_kernel_hip_kernel.cpp"
#include "tea_leaf_axpby_kernel_hip_kernel.cpp"
#include "tea_leaf_cheby_init_kernel_hip_kernel.cpp"
#include "tea_leaf_recip3_kernel_hip_kernel.cpp"
#include "tea_leaf_xpy_kernel_hip_kernel.cpp"
#include "tea_leaf_common_init_u_u0_kernel_hip_kernel.cpp"
#include "tea_leaf_recip_kernel_hip_kernel.cpp"
#include "tea_leaf_common_init_Kx_Ky_kernel_hip_kernel.cpp"
#include "tea_leaf_init_zero_kernel_hip_kernel.cpp"
#include "tea_leaf_common_init_kernel_hip_kernel.cpp"
#include "tea_leaf_recip2_kernel_hip_kernel.cpp"
#include "tea_leaf_common_residual_kernel_hip_kernel.cpp"
#include "tea_leaf_norm2_kernel_hip_kernel.cpp"
#include "tea_leaf_common_init_diag_init_kernel_hip_kernel.cpp"
#include "tea_leaf_zeqxty_kernel_hip_kernel.cpp"
#include "tea_leaf_jacobi_kernel_hip_kernel.cpp"
#include "tea_leaf_ppcg_init1_kernel_hip_kernel.cpp"
#include "tea_leaf_ppcg_init2_kernel_hip_kernel.cpp"
#include "tea_leaf_ppcg_inner1_kernel_hip_kernel.cpp"
#include "tea_leaf_ppcg_inner2_kernel_hip_kernel.cpp"
#include "tea_leaf_ppcg_reduce_kernel_hip_kernel.cpp"
#include "update_halo_kernel1_b2_hip_kernel.cpp"
#include "update_halo_kernel1_b1_hip_kernel.cpp"
#include "update_halo_kernel1_t2_hip_kernel.cpp"
#include "update_halo_kernel1_t1_hip_kernel.cpp"
#include "update_halo_kernel1_l2_hip_kernel.cpp"
#include "update_halo_kernel1_l1_hip_kernel.cpp"
#include "update_halo_kernel1_r2_hip_kernel.cpp"
#include "update_halo_kernel1_r1_hip_kernel.cpp"
