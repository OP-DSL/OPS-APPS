//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_3D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define nx nx_OPSCONSTANT
__constant__ int nx;
#define ny ny_OPSCONSTANT
__constant__ int ny;
#define nz nz_OPSCONSTANT
__constant__ int nz;
#define lambda lambda_OPSCONSTANT
__constant__ double lambda;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&nx)[0]=0;
((int*)&ny)[0]=0;
((int*)&nz)[0]=0;
((int*)&lambda)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"nx")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(nx_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"ny")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(ny_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"nz")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(nz_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"lambda")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(lambda_OPSCONSTANT), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "init_kernel_hip_kernel.cpp"
#include "preproc_kernel_hip_kernel.cpp"
