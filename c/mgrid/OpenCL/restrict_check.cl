//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_2D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void restrict_check(const ptr_double val,
  int *idx,
  int *err,
  const int *sizex) {
  if (OPS_ACCS(val, 0,0) != idx[0]*4 + idx[1]*4**sizex) {


    *err = 1;
  } else
    *err = 0;
}


__kernel void ops_restrict_check(
__global const double* restrict arg0,
__global int* restrict arg2,
__local int* scratch2,
int r_bytes2,
const int arg3,
const int base0,
int arg_idx0, int arg_idx1,
const int size0,
const int size1 ){

  arg2 += r_bytes2;
  int arg2_l[1];
  for (int d=0; d<1; d++) arg2_l[d] = -INFINITY_int;

  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  if (idx_x < size0 && idx_y < size1) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_restrict_check], xdim0_restrict_check};
    restrict_check(ptr0,
                        arg_idx,
                        arg2_l,
                        &arg3);
  }
  int group_index = get_group_id(0) + get_group_id(1)*get_num_groups(0)+ get_group_id(2)*get_num_groups(0)*get_num_groups(1);
  for (int d=0; d<1; d++)
    reduce_int(arg2_l[d], scratch2, &arg2[group_index*1+d], OPS_MAX);

}
