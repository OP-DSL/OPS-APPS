//
// auto-generated by ops.py
//
__constant__ int dims_prolong_check [5][1];
static int dims_prolong_check_h [5][1] = {0};

//user function
__device__

void prolong_check_gpu(const ACC<double> &val,
  int *idx,
  int *err,
  const int *sizex,
  const int *sizey) {
  int lerr = 0;
  lerr |= (val(0,0) != idx[0]/4 + (idx[1]/4)*(*sizex/4));


  int xm = (idx[0]-1)<0 ? *sizex-1 : idx[0]-1;
  int xp = (idx[0]+1)>=*sizex ? 0 : idx[0]+1;
  int ym = (idx[1]-1)<0 ? *sizey-1 : idx[1]-1;
  int yp = (idx[1]+1)>=*sizey ? 0 : idx[1]+1;
  lerr |= (val(1,0) != xp/4 + (idx[1]/4)*(*sizex/4));


  lerr |= (val(-1,0) != xm/4 + (idx[1]/4)*(*sizex/4));


  lerr |= (val(0,1) != idx[0]/4 + (yp/4)*(*sizex/4));


  lerr |= (val(0,-1) != idx[0]/4 + (ym/4)*(*sizex/4));



  if (lerr != 0) *err = 1;
  else *err = 0;

}



__global__ void ops_prolong_check(
double* __restrict arg0,
int arg_idx0, int arg_idx1,
int* __restrict arg2,
const int arg3,
const int arg4,
int size0,
int size1 ){

  int arg2_l[1];
  for (int d=0; d<1; d++) arg2_l[d] = -INFINITY_int;

  int idx_y = blockDim.y * blockIdx.y + threadIdx.y;
  int idx_x = blockDim.x * blockIdx.x + threadIdx.x;

  int arg_idx[2];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg0 += idx_x * 1*1 + idx_y * 1*1 * dims_prolong_check[0][0];

  if (idx_x < size0 && idx_y < size1) {
    const ACC<double> argp0(dims_prolong_check[0][0], arg0);
    prolong_check_gpu(argp0, arg_idx, arg2_l, &arg3,
                   &arg4);
  }
  for (int d=0; d<1; d++)
    ops_reduction_cuda<OPS_MAX>(&arg2[d+(blockIdx.x + blockIdx.y*gridDim.x)*1],arg2_l[d]);

}

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_prolong_check(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
#else
void ops_par_loop_prolong_check_execute(ops_kernel_descriptor *desc) {
  int dim = desc->dim;
  #if OPS_MPI
  ops_block block = desc->block;
  #endif
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  #endif

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};


  #if CHECKPOINTING && !OPS_LAZY
  if (!ops_checkpointing_before(args,5,range,3)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,3,"prolong_check");
    block->instance->OPS_kernels[3].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  #if OPS_MPI && !OPS_LAZY
  sub_block_list sb = OPS_sub_block_list[block->index];
  #endif //OPS_MPI

  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0]+start[0];
  arg_idx[1] = sb->decomp_disp[1]+start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = start[0];
  arg_idx[1] = start[1];
  #endif //OPS_MPI
  int xdim0 = args[0].dat->size[0];

  if (xdim0 != dims_prolong_check_h[0][0]) {
    dims_prolong_check_h[0][0] = xdim0;
    cutilSafeCall(block->instance->ostream(), cudaMemcpyToSymbol( dims_prolong_check, dims_prolong_check_h, sizeof(dims_prolong_check)));
  }


  #ifdef OPS_MPI
  int *arg2h = (int *)(((ops_reduction)args[2].data)->data + ((ops_reduction)args[2].data)->size * block->index);
  #else
  int *arg2h = (int *)(((ops_reduction)args[2].data)->data);
  #endif

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);

  dim3 grid( (x_size-1)/block->instance->OPS_block_size_x+ 1, (y_size-1)/block->instance->OPS_block_size_y + 1, 1);
  dim3 tblock(block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z);

  int nblocks = ((x_size-1)/block->instance->OPS_block_size_x+ 1)*((y_size-1)/block->instance->OPS_block_size_y + 1);
  int maxblocks = nblocks;
  int reduct_bytes = 0;
  size_t reduct_size = 0;

  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));
  reduct_size = MAX(reduct_size,sizeof(int)*1);

  reallocReductArrays(block->instance,reduct_bytes);
  reduct_bytes = 0;

  arg2.data = block->instance->OPS_reduct_h + reduct_bytes;
  arg2.data_d = block->instance->OPS_reduct_d + reduct_bytes;
  for (int b=0; b<maxblocks; b++)
  for (int d=0; d<1; d++) ((int *)arg2.data)[d+b*1] = -INFINITY_int;
  reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));


  mvReductArraysToDevice(block->instance,reduct_bytes);
  long long int dat0 = (block->instance->OPS_soa ? args[0].dat->type_size : args[0].dat->elem_size);

  char *p_a[5];

  //set up initial pointers
  long long int base0 = args[0].dat->base_offset + 
           dat0 * 1 * (start[0] * args[0].stencil->stride[0]);
  base0 = base0+ dat0 *
    args[0].dat->size[0] *
    (start[1] * args[0].stencil->stride[1]);
  p_a[0] = (char *)args[0].data_d + base0;


  #ifndef OPS_LAZY
  ops_H_D_exchanges_device(args, 5);
  ops_halo_exchanges(args,5,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[3].mpi_time += t2-t1;
  }

  size_t nshared = 0;
  int nthread = block->instance->OPS_block_size_x*block->instance->OPS_block_size_y*block->instance->OPS_block_size_z;

  nshared = MAX(nshared,sizeof(int)*1);

  nshared = MAX(nshared*nthread,reduct_size*nthread);

  //call kernel wrapper function, passing in pointers to data
  if (x_size > 0 && y_size > 0)
    ops_prolong_check<<<grid, tblock, nshared >>> (  (double *)p_a[0], arg_idx[0], arg_idx[1],
         (int *)arg2.data_d, *(int *)arg3.data,
         *(int *)arg4.data,x_size, y_size);

  cutilSafeCall(block->instance->ostream(), cudaGetLastError());

  mvReductArraysToHost(block->instance,reduct_bytes);
  for ( int b=0; b<maxblocks; b++ ){
    for ( int d=0; d<1; d++ ){
      arg2h[d] = MAX(arg2h[d],((int *)arg2.data)[d+b*1]);
    }
  }
  arg2.data = (char *)arg2h;

  if (block->instance->OPS_diags>1) {
    cutilSafeCall(block->instance->ostream(), cudaDeviceSynchronize());
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[3].time += t1-t2;
  }

  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 5);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[3].mpi_time += t2-t1;
    block->instance->OPS_kernels[3].transfer += ops_compute_transfer(dim, start, end, &arg0);
  }
}

#ifdef OPS_LAZY
void ops_par_loop_prolong_check(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 3;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 3;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 5;
  desc->args = (ops_arg*)ops_malloc(5*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->args[2] = arg2;
  desc->args[3] = arg3;
  char *tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg3.data,1*sizeof(int));
  desc->args[3].data = tmp;
  desc->args[4] = arg4;
  tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg4.data,1*sizeof(int));
  desc->args[4].data = tmp;
  desc->function = ops_par_loop_prolong_check_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,3,"prolong_check");
  }
  ops_enqueue_kernel(desc);
}
#endif
