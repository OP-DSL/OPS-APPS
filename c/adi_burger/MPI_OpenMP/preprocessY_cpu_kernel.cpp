//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_preprocessY(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
#else
void ops_par_loop_preprocessY_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  ops_arg arg7 = desc->args[7];
  ops_arg arg8 = desc->args[8];
  ops_arg arg9 = desc->args[9];
  ops_arg arg10 = desc->args[10];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[11] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,11,range,2)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,2,"preprocessY");
    block->instance->OPS_kernels[2].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "preprocessY");
  #endif


  //compute locally allocated range for the sub-block
  int start[2];
  int end[2];
  int arg_idx[2];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<2; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 11,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim0_preprocessY = args[0].dat->size[0];
  int xdim1_preprocessY = args[1].dat->size[0];
  int xdim3_preprocessY = args[3].dat->size[0];
  int xdim4_preprocessY = args[4].dat->size[0];
  int xdim5_preprocessY = args[5].dat->size[0];
  int xdim6_preprocessY = args[6].dat->size[0];
  int xdim7_preprocessY = args[7].dat->size[0];
  int xdim8_preprocessY = args[8].dat->size[0];
  int xdim9_preprocessY = args[9].dat->size[0];

  //set up initial pointers and exchange halos if necessary
  int base0 = args[0].dat->base_offset;
  double * __restrict__ u_p = (double *)(args[0].data + base0);

  int base1 = args[1].dat->base_offset;
  double * __restrict__ v_p = (double *)(args[1].data + base1);

  double * __restrict__ time = (double *)args[2].data;


  int base3 = args[3].dat->base_offset;
  double * __restrict__ a_p = (double *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  double * __restrict__ b_p = (double *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  double * __restrict__ c_p = (double *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  double * __restrict__ du_p = (double *)(args[6].data + base6);

  int base7 = args[7].dat->base_offset;
  double * __restrict__ dv_p = (double *)(args[7].data + base7);

  int base8 = args[8].dat->base_offset;
  double * __restrict__ resU_p = (double *)(args[8].data + base8);

  int base9 = args[9].dat->base_offset;
  double * __restrict__ resV_p = (double *)(args[9].data + base9);




  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 11);
  ops_halo_exchanges(args,11,range);
  ops_H_D_exchanges_host(args, 11);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[2].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for
  for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
    #ifdef __INTEL_COMPILER
    #pragma loop_count(10000)
    #pragma omp simd
    #elif defined(__clang__)
    #pragma clang loop vectorize(assume_safety)
    #elif defined(__GNUC__)
    #pragma GCC ivdep
    #else
    #pragma simd
    #endif
    for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
      int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y};
      const ACC<double> u(xdim0_preprocessY, u_p + n_x*1 + n_y * xdim0_preprocessY*1);
      const ACC<double> v(xdim1_preprocessY, v_p + n_x*1 + n_y * xdim1_preprocessY*1);
      ACC<double> a(xdim3_preprocessY, a_p + n_x*1 + n_y * xdim3_preprocessY*1);
      ACC<double> b(xdim4_preprocessY, b_p + n_x*1 + n_y * xdim4_preprocessY*1);
      ACC<double> c(xdim5_preprocessY, c_p + n_x*1 + n_y * xdim5_preprocessY*1);
      ACC<double> du(xdim6_preprocessY, du_p + n_x*1 + n_y * xdim6_preprocessY*1);
      ACC<double> dv(xdim7_preprocessY, dv_p + n_x*1 + n_y * xdim7_preprocessY*1);
      ACC<double> resU(xdim8_preprocessY, resU_p + n_x*1 + n_y * xdim8_preprocessY*1);
      ACC<double> resV(xdim9_preprocessY, resV_p + n_x*1 + n_y * xdim9_preprocessY*1);
      
    resU(0, 0) = 0;
    resV(0, 0) = 0;
    if (idx[0] == 0 || idx[0] == nx - 1 || idx[1] == 0 || idx[1] == ny - 1) {
        a(0, 0) = 0;
        b(0, 0) = 1;
        c(0, 0) = 0;
        du(0, 0) =
            0.75 -
            1 / (4 * (1 + exp((-4 * idx[0] * h + 4 * idx[1] * h - (*time)) *
                              Re / 32)));
        dv(0, 0) =
            0.75 +
            1 / (4 * (1 + exp((-4 * idx[0] * h + 4 * idx[1] * h - (*time)) *
                              Re / 32)));
    } else {
        a(0, 0) = -r1 * v(0, 0) - r2;
        b(0, 0) = 1 + 2 * r2;
        c(0, 0) = -r1 * v(0, 0) + r2;
        du(0, 0) = (r1 * u(0, 0) + r2) * u(-1, 0) + (1 - 2 * r2) * u(0, 0) +
                   (-r1 * u(0, 0) + r2) * u(1, 0);
        dv(0, 0) = (r1 * u(0, 0) + r2) * v(-1, 0) + (1 - 2 * r2) * v(0, 0) +
                   (-r1 * u(0, 0) + r2) * v(1, 0);
    }

    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[2].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 11);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  ops_set_halo_dirtybit3(&args[7],range);
  ops_set_halo_dirtybit3(&args[8],range);
  ops_set_halo_dirtybit3(&args[9],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[2].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg9);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_preprocessY(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7,
 ops_arg arg8, ops_arg arg9, ops_arg arg10) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 2;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 2;
  for ( int i=0; i<4; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 11;
  desc->args = (ops_arg*)ops_malloc(11*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg0.dat->index;
  desc->args[1] = arg1;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg1.dat->index;
  desc->args[2] = arg2;
  char *tmp = (char*)ops_malloc(1*sizeof(double));
  memcpy(tmp, arg2.data,1*sizeof(double));
  desc->args[2].data = tmp;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->args[7] = arg7;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg7.dat->index;
  desc->args[8] = arg8;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg8.dat->index;
  desc->args[9] = arg9;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg9.dat->index;
  desc->args[10] = arg10;
  desc->function = ops_par_loop_preprocessY_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,2,"preprocessY");
  }
  ops_enqueue_kernel(desc);
}
#endif
