//
// auto-generated by ops.py
//



void ops_init_backend();
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <complex>

#define OPS_2D
#include  "ops_lib_core.h"

//
// ops_par_loop declarations
//

void ops_par_loop_complex_populate_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg,
  ops_arg );



//#include "complex_populate_kernel.h"

int main(int argc, char **argv)
{


  ops_init(argc,argv,2);
  ops_init_backend();

  ops_block grid0 = ops_decl_block(2, "grid0");


  int s2D_00[]         = {0,0};
  ops_stencil S2D_00 = ops_decl_stencil( 2, 1, s2D_00, "00");

  int d_p[2] = {2,2};
  int d_m[2] = {-2,-2};
  int size1[2] = {6, 6};

  int stride0[2] = {1, 1};
  int base[2] = {0,0};
  complexd* temp = NULL;

  ops_dat data1 = ops_decl_dat(grid0, 1, size1, base, d_m, d_p, stride0 , temp, "complexd", "data1");

  ops_reduction red = ops_decl_reduction_handle(sizeof(complexd), "complexd", "reduction");

  ops_partition("");



  double ct0, ct1, et0, et1;
  ops_timers_core(&ct0, &et0);
  int iter_range_small[] = {0,6,0,6};

  ops_par_loop_complex_populate_kernel("complex_populate_kernel", grid0, 2, iter_range_small,
               ops_arg_dat(data1, 1, S2D_00, "complexd", OPS_WRITE),
               ops_arg_reduce(red, 1, "complexd", OPS_INC),
               ops_arg_idx());
  ops_print_dat_to_txtfile(data1, "data.txt");

  complexd redval;
  ops_reduction_result(red, &redval);

  ops_printf("reduction result: %g+%gi\n",std::real(redval), std::imag(redval));
  ops_timers_core(&ct1, &et1);
  ops_timing_output(std::cout);

  ops_printf("\nTotal Wall time %lf\n",et1-et0);

  if (std::real(redval) == 90.0 &&
      std::imag(redval) == 90.0)
    ops_printf("PASSED\n");
  else
    ops_printf("FAILED\n");

  ops_exit();
}
