//
// auto-generated by ops.py
//



void ops_init_backend();
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#define OPS_2D
#include  "ops_lib_core.h"

//
// ops_par_loop declarations
//

void ops_par_loop_access_populate_kernel(char const *, ops_block, int , int*,
  ops_arg,
  ops_arg );



//#include "access_populate_kernel.h"

void fetch_test(ops_dat data);

int main(int argc, char **argv)
{


  ops_init(argc,argv,2);
  ops_init_backend();

  ops_block grid0 = ops_decl_block(2, "grid0");

  int s2D_00[]         = {0,0};
  int s2D_5pt[]          = {0,0, 1,0, -1,0, 0,1, 0,-1};
  ops_stencil S2D_00 = ops_decl_stencil( 2, 1, s2D_00, "00");
  ops_stencil S2D_5pt = ops_decl_stencil( 2, 5, s2D_5pt, "5pt");

  int d_p[2] = {1,1};
  int d_m[2] = {-1,-1};
  int size[2] = {20, 20};
  int base[2] = {0,0};
  double* temp = NULL;

  ops_dat data0 = ops_decl_dat(grid0, 1, size, base, d_m, d_p, temp, "double", "data0");

  ops_partition("");


  double ct0, ct1, et0, et1;
  ops_timers(&ct0, &et0);

  int iter_range[] = {0,20,0,20};
  ops_par_loop_access_populate_kernel("access_populate_kernel", grid0, 2, iter_range,
               ops_arg_dat(data0, 1, S2D_00, "double", OPS_WRITE),
               ops_arg_idx());

  int sizes[2], disp[2], strides[2];
  int test_slab_range[] = {6, 8, 6, 8};
  size_t bytes = ops_dat_get_slab_extents(data0, 0, disp, sizes, test_slab_range);
  printf("hyperslab local displacement %d,%d, size %d,%d, bytes: %ld\n",disp[0], disp[1], sizes[0], sizes[1], bytes);

  ops_memspace memspace = OPS_HOST;
  ops_dat_get_raw_metadata(data0, 0, disp, sizes, strides, NULL, NULL);

  double *raw_data = (double*)ops_dat_get_raw_pointer(data0, 0, S2D_5pt, &memspace);

  if (10 >= disp[0] && 10 < disp[0]+sizes[0] &&
      10 >= disp[1] && 10 < disp[1]+sizes[1]) {
    raw_data[(10-disp[0]) + (10-disp[1])*strides[0]] =
        raw_data[(10-disp[0]    ) + (10-disp[1]    )*strides[0]] +
        raw_data[(10-disp[0] + 1) + (10-disp[1]    )*strides[0]] +
        raw_data[(10-disp[0] - 1) + (10-disp[1]    )*strides[0]] +
        raw_data[(10-disp[0]    ) + (10-disp[1] + 1)*strides[0]] +
        raw_data[(10-disp[0]    ) + (10-disp[1] - 1)*strides[0]];
  }
  ops_dat_release_raw_data(data0, 0, OPS_RW);

  ops_print_dat_to_txtfile(data0, "data0.txt");

  fetch_test(data0);

  double *slab = (double*)malloc(4*sizeof(double));
  int slab_range[] = {10,12,10,12};
  ops_dat_fetch_data_slab_memspace(data0, 0, (char*)slab, slab_range, OPS_HOST);
  ops_printf("2D slab extracted on HOST:\n%g %g\n%g %g\n", slab[0], slab[1], slab[2], slab[3]);
  free(slab);

  ops_timers(&ct1, &et1);
  ops_timing_output(std::cout);

  ops_printf("\nTotal Wall time %lf\n",et1-et0);

  ops_exit();
}
