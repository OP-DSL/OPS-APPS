//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_3D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void initKernel(ptr_double u,
  ptr_double v,
  ptr_double w,
  int *idx, const double Re, const double h)
{
    const double x{h * idx[0]};
    const double y{h * idx[1]};
    const double z{h * idx[2]};
    OPS_ACCS(u, 0, 0, 0) =
        2 * sin(x) * sin(y) * cos(z) / (Re * (cos(x) * sin(y) * cos(z) + 1));
    OPS_ACCS(v, 0, 0, 0) =
        -2 * cos(x) * cos(y) * cos(z) / (Re * (cos(x) * sin(y) * cos(z) + 1));
    OPS_ACCS(w, 0, 0, 0) =
        2 * cos(x) * sin(y) * sin(z) / (Re * (cos(x) * sin(y) * cos(z) + 1));
}


__kernel void ops_initKernel(
__global double* restrict arg0,
__global double* restrict arg1,
__global double* restrict arg2,
const double Re,
const double h,
const int base0,
const int base1,
const int base2,
int arg_idx0, int arg_idx1, int arg_idx2,
const int size0,
const int size1,
const int size2 ){


  int idx_y = get_global_id(1);
  int idx_z = get_global_id(2);
  int idx_x = get_global_id(0);

  int arg_idx[3];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg_idx[2] = arg_idx2+idx_z;
  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_initKernel + idx_z * 1*1 * xdim0_initKernel * ydim0_initKernel], xdim0_initKernel, ydim0_initKernel};
    ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_initKernel + idx_z * 1*1 * xdim1_initKernel * ydim1_initKernel], xdim1_initKernel, ydim1_initKernel};
    ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_initKernel + idx_z * 1*1 * xdim2_initKernel * ydim2_initKernel], xdim2_initKernel, ydim2_initKernel};
    initKernel(ptr0,
                    ptr1,
                    ptr2,
                    arg_idx,
                    Re,
                    h);
  }

}
