//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_3D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void CopyUVW(const ptr_double u,
  const ptr_double v,
  const ptr_double w,
  ptr_double uStar,
  ptr_double vStar,
  ptr_double wStar) {
    OPS_ACCS(uStar, 0, 0, 0) = OPS_ACCS(u, 0, 0, 0);
    OPS_ACCS(vStar, 0, 0, 0) = OPS_ACCS(v, 0, 0, 0);
    OPS_ACCS(wStar, 0, 0, 0) = OPS_ACCS(w, 0, 0, 0);
}


__kernel void ops_CopyUVW(
__global const double* restrict arg0,
__global const double* restrict arg1,
__global const double* restrict arg2,
__global double* restrict arg3,
__global double* restrict arg4,
__global double* restrict arg5,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int base5,
const int size0,
const int size1,
const int size2 ){


  int idx_y = get_global_id(1);
  int idx_z = get_global_id(2);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    const ptr_double ptr0 = { &arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_CopyUVW + idx_z * 1*1 * xdim0_CopyUVW * ydim0_CopyUVW], xdim0_CopyUVW, ydim0_CopyUVW};
    const ptr_double ptr1 = { &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_CopyUVW + idx_z * 1*1 * xdim1_CopyUVW * ydim1_CopyUVW], xdim1_CopyUVW, ydim1_CopyUVW};
    const ptr_double ptr2 = { &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_CopyUVW + idx_z * 1*1 * xdim2_CopyUVW * ydim2_CopyUVW], xdim2_CopyUVW, ydim2_CopyUVW};
    ptr_double ptr3 = { &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_CopyUVW + idx_z * 1*1 * xdim3_CopyUVW * ydim3_CopyUVW], xdim3_CopyUVW, ydim3_CopyUVW};
    ptr_double ptr4 = { &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_CopyUVW + idx_z * 1*1 * xdim4_CopyUVW * ydim4_CopyUVW], xdim4_CopyUVW, ydim4_CopyUVW};
    ptr_double ptr5 = { &arg5[base5 + idx_x * 1*1 + idx_y * 1*1 * xdim5_CopyUVW + idx_z * 1*1 * xdim5_CopyUVW * ydim5_CopyUVW], xdim5_CopyUVW, ydim5_CopyUVW};
    CopyUVW(ptr0,
                 ptr1,
                 ptr2,
                 ptr3,
                 ptr4,
                 ptr5);
  }

}
